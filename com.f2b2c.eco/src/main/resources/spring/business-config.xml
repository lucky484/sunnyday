<?xml version="1.0" encoding="UTF-8"?>
<!-- Repository and Service layers -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:task="http://www.springframework.org/schema/task"   
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-4.2.xsd
    http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task-4.2.xsd">
        
    <!-- ========================= RESOURCE DEFINITIONS ========================= -->
    
    <!-- import the dataSource definition -->
    <import resource="datasource-config.xml" />
    <context:property-placeholder location="classpath:spring/job.properties" ignore-unresolvable="true" />
    <context:component-scan base-package="com.f2b2c.eco.job" />
    <context:component-scan base-package="com.f2b2c.eco.service" />
    <context:component-scan base-package="com.f2b2c.eco.service2" />
    <context:annotation-config />
    
    <!-- 利用SpringContextUtils 可以在源码中直接拿到bean，而不用注入 -->
	<bean id="SpringContextUtils" class="com.f2b2c.eco.util.SpringContextUtils" lazy-init="false"></bean>
    
	 <beans profile="mybatis">
        
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="dataSource" ref="dataSource" />
            <property name="configLocation" value="classpath:mybatis/mybatis.xml" />
            <property name="mapperLocations">
                <array>
                    <value>classpath:mybatis/mappers/**/*.xml</value>
                    <value>classpath:mybatis/mappers2/**/*.xml</value>
                </array>
            </property>
        </bean> 
        
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
             <property name="basePackage" value="com.f2b2c.eco.dao" />
             <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        </bean>
	    
       	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
        
        <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="truncate*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="find*" propagation="NOT_SUPPORTED" read-only="true" /> <!-- 查询方法以非事务的方式执行操作 --> 
            <tx:method name="get*" propagation="NOT_SUPPORTED" read-only="true" />
            <tx:method name="query*" propagation="NOT_SUPPORTED" read-only="true" />
            <tx:method name="select*" propagation="NOT_SUPPORTED" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
        </tx:attributes>  
    </tx:advice> 
   <!-- <tx:annotation-driven /> -->
<!--     <bean id="logAspect" class="com.f2b2c.eco.aop.LogAspect" />
    <bean id="bLogAspect" class="com.f2b2c.eco.aop.BLogAspect" /> -->
    <!-- Spring AOP config -->  
    <aop:config>  
        <!-- 切入点 -->  
        <aop:pointcut id="biz"  
            expression="execution(* com.f2b2c.eco.service..*.*(..))" />  
            <aop:advisor advice-ref="txAdvice" pointcut-ref="biz" />
     <!--      F端日志切面
         <aop:aspect id="serviceMonitor" ref="logAspect">
                <aop:pointcut id="bizLog" expression="execution(* com.f2b2c.eco.service.platform..*.*(..))" />  
                <aop:around method="doAroundMethodLog" pointcut-ref="bizLog" />
         </aop:aspect>
         B端日志切面
          <aop:aspect id="serviceMonitorTo" ref="bLogAspect">
                <aop:pointcut id="bizBLog" expression="execution(* com.f2b2c.eco.service.market..*.*(..))" />  
                <aop:around method="doAroundMethodLog" pointcut-ref="bizBLog" />
         </aop:aspect> -->
    </aop:config>
    
        
        <!-- 定时任务 -->
         <task:annotation-driven /> 
         <!--  定时器开关-->  
        <task:scheduled-tasks scheduler="myScheduler"> 
            <task:scheduled ref="timedTaskJob" method="autoBakUpOrder" cron="${auto_BakUp_Order_time}" />
            <task:scheduled ref="timeOutTask" method="deleteCheckFruitOrder" cron="${order_time_out_time}" />        <!-- 审核通过后超过1小时的订单 -->
            <task:scheduled ref="timeOutTask" method="deleteFeFruitTimeOutOrder" cron="${order_fe_fruit_time_out_time}" />  <!-- 取消一天之内未付款的非水果订单 -->
            <task:scheduled ref="timeOutTask" method="deleteFruitPayOrder" cron="${order_time_out_fruit_pay_time}" />         <!-- 超过发货时间两小时的水果订单 自动收货 -->
            <task:scheduled ref="timeOutTask" method="deleteFeFruitPayOrder" cron="${order_fe_fruit_time_out_time}" />  <!-- 超过发货时间10天的非水果订单 -->
            <task:scheduled ref="timeOutTask" method="deleteCheckFeFruitOrder" cron="${order_fe_fruit_time_out_time}" />        <!-- 审核通过后超过2天的非水果订单 -->
            <task:scheduled ref="commissionTask" method="computeCommission" cron="${commission_task_time}" />        <!-- 每个月一号计算上个月的佣金 -->
        </task:scheduled-tasks>
        <task:scheduler id="myScheduler" pool-size="10"/>
    </beans>
</beans>